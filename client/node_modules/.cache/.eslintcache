[{"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\index.js":"1","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\App.js":"2","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\routing\\PrivateRoute.js":"4","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\SearchPage.js":"5","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\RegisterPage.js":"6","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\LoginPage.js":"7","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\NavBar.js":"8","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\ListSearches.js":"9","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\History.js":"10","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\ListLogs.js":"11","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\EditModal.js":"12","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\SearchCards.js":"13","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\Pagination.js":"14","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\CardModal.js":"15","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\AddContact.js":"16","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\Settings.js":"17","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\Bookmarks.js":"18","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\AddFolder.js":"19","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\Folder.js":"20","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\inFolder.js":"21","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\AddFavorite.js":"22","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\FavoriteCards.js":"23","C:\\Users\\Colby\\Documents\\TESTING\\MORE CLONING\\Java-Search-Engine\\client\\src\\index.js":"24","C:\\Users\\Colby\\Documents\\TESTING\\MORE CLONING\\Java-Search-Engine\\client\\src\\App.js":"25","C:\\Users\\Colby\\Documents\\TESTING\\MORE CLONING\\Java-Search-Engine\\client\\src\\reportWebVitals.js":"26","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\index.js":"27","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\App.js":"28","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\reportWebVitals.js":"29","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\pages\\SearchPage.js":"30","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\routing\\PrivateRoute.js":"31","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\pages\\RegisterPage.js":"32","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\pages\\LoginPage.js":"33","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\pages\\History.js":"34","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\ListSearches.js":"35","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\NavBar.js":"36","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\ListLogs.js":"37","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\SearchCards.js":"38","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\Pagination.js":"39","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\services\\MongoDB.js":"40","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\services\\SQL.js":"41","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\services\\http-commons.js":"42"},{"size":563,"mtime":1628876764508,"results":"43","hashOfConfig":"44"},{"size":1294,"mtime":1629429539625,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":499162500000,"results":"46","hashOfConfig":"44"},{"size":470,"mtime":1628872165250,"results":"47","hashOfConfig":"44"},{"size":10431,"mtime":1629465560256,"results":"48","hashOfConfig":"44"},{"size":5838,"mtime":1629465970541,"results":"49","hashOfConfig":"44"},{"size":4537,"mtime":1629465912430,"results":"50","hashOfConfig":"44"},{"size":2760,"mtime":1629465870439,"results":"51","hashOfConfig":"44"},{"size":11386,"mtime":1629422693812,"results":"52","hashOfConfig":"44"},{"size":1123,"mtime":1629427645600,"results":"53","hashOfConfig":"44"},{"size":1264,"mtime":1629421414377,"results":"54","hashOfConfig":"44"},{"size":6107,"mtime":1629420550892,"results":"55","hashOfConfig":"44"},{"size":7234,"mtime":1629471079606,"results":"56","hashOfConfig":"44"},{"size":708,"mtime":1629422183275,"results":"57","hashOfConfig":"44"},{"size":2619,"mtime":1629470957654,"results":"58","hashOfConfig":"44"},{"size":7233,"mtime":1629417251111,"results":"59","hashOfConfig":"44"},{"size":4588,"mtime":1629429494637,"results":"60","hashOfConfig":"44"},{"size":2304,"mtime":1629427554697,"results":"61","hashOfConfig":"44"},{"size":2646,"mtime":1629465627807,"results":"62","hashOfConfig":"44"},{"size":552,"mtime":1629421342228,"results":"63","hashOfConfig":"44"},{"size":4471,"mtime":1629428520718,"results":"64","hashOfConfig":"44"},{"size":6030,"mtime":1629418073260,"results":"65","hashOfConfig":"44"},{"size":5408,"mtime":1629421296767,"results":"66","hashOfConfig":"44"},{"size":563,"mtime":1628876764508,"results":"67","hashOfConfig":"68"},{"size":1259,"mtime":1639241268835,"results":"69","hashOfConfig":"68"},{"size":362,"mtime":499162500000,"results":"70","hashOfConfig":"68"},{"size":563,"mtime":1628876764508,"results":"71","hashOfConfig":"72"},{"size":922,"mtime":1639529211364,"results":"73","hashOfConfig":"72"},{"size":362,"mtime":499162500000,"results":"74","hashOfConfig":"72"},{"size":22092,"mtime":1639939998234,"results":"75","hashOfConfig":"72"},{"size":470,"mtime":1628872165250,"results":"76","hashOfConfig":"72"},{"size":5839,"mtime":1639335846331,"results":"77","hashOfConfig":"72"},{"size":4278,"mtime":1639515871509,"results":"78","hashOfConfig":"72"},{"size":1357,"mtime":1639588418218,"results":"79","hashOfConfig":"72"},{"size":6750,"mtime":1639587536572,"results":"80","hashOfConfig":"72"},{"size":1942,"mtime":1639529225886,"results":"81","hashOfConfig":"72"},{"size":1263,"mtime":1639588477588,"results":"82","hashOfConfig":"72"},{"size":5407,"mtime":1639938546613,"results":"83","hashOfConfig":"72"},{"size":708,"mtime":1629422183275,"results":"84","hashOfConfig":"72"},{"size":1763,"mtime":1639344161170,"results":"85","hashOfConfig":"72"},{"size":1273,"mtime":1639684585238,"results":"86","hashOfConfig":"72"},{"size":233,"mtime":1639767950297,"results":"87","hashOfConfig":"72"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"ckjset",{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t77s5b",{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},"mkkmul",{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"147"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"147"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"147"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"147"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"147"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\index.js",[],["183","184"],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\App.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\routing\\PrivateRoute.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\SearchPage.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\RegisterPage.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\LoginPage.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\NavBar.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\ListSearches.js",["185"],"import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\n// BOOTSTRAP \r\nimport {Container} from 'react-bootstrap';\r\n// MATERIAL UI CORE\r\nimport {IconButton} from '@material-ui/core';\r\nimport {DataGrid} from '@material-ui/data-grid';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n// MATERIAL UI ICONS\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\n// MATERIAL UI LAB\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n// COMPONENTS\r\nimport EditModal from './EditModal'\r\nimport SearchCards from './SearchCards';\r\nimport AddContact from './AddContact';\r\nimport AddFavorite from './AddFavorite'\r\n\r\n\r\nfunction ListSearches({searchTerm}) {\r\n    // Modal Info\r\n    const [tableData, setTableData] = useState([])\r\n    const [selectionModel, setSelectionModel] = useState([])\r\n    const [editInfo, setEditInfo] = useState([])\r\n    const [contact123, setContacts] = useState([])\r\n    // View buttons to switch from cards to datagrid\r\n    const [view, setView] = useState('module');\r\n    // Modal States\r\n    const [edit, setEdit] = useState(false);\r\n    const [viewAddModal, setViewAddModal] = useState(false)\r\n\r\n    // get current contact info and save to state for edit modal\r\n    const getContactInfo = async () => {\r\n        let id = selectionModel[0]\r\n        let currentContact = await axios({\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n            },\r\n            url: \"http://localhost:5000/api/private/get/contact\",\r\n            data: {\r\n                id: id\r\n            }\r\n        })\r\n        if (currentContact.data._id) {\r\n            setEditInfo(currentContact.data)\r\n        } else {\r\n            setEditInfo(currentContact.data[0])\r\n        }\r\n\r\n    }\r\n    // change from cards to data grid\r\n    const handleViewChange = (event, nextView) => {\r\n        if(view === \"module\"){\r\n            setView(\"list\")\r\n        } else {\r\n            setView(\"module\")\r\n        }\r\n    };\r\n    // close modal handler\r\n    const closeModalHandler = () => {\r\n        setEdit(false)\r\n        setViewAddModal(false)\r\n    };\r\n    // delete contact function for on select\r\n    const deleteOneContact = async () => {\r\n        if (window.confirm(\"Are you sure you want to delete this contact?\")) {\r\n            let deleteContact = await axios({\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n                },\r\n                url: \"http://localhost:5000/api/private/delete/contact\",\r\n                data: {\r\n                    id: selectionModel[0]\r\n                }\r\n            })\r\n            if (deleteContact.status === 200) {\r\n                window.location = \"/\"\r\n            } else {\r\n                alert(\"DIDNT DELETE\")\r\n            }\r\n        } else {\r\n            console.log(\"DIDNT DELETE\")\r\n        }\r\n    } \r\n    // delete multiple contacts function for on select DATAGRID ONLY\r\n    const deleteManyContacts = async () => {\r\n        if (window.confirm(\"Are you sure you want to delete this contact?\")) {\r\n            let deleteContact = await axios({\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n                },\r\n                url: \"http://localhost:5000/api/private/delete/contacts\",\r\n                data: {\r\n                    id: selectionModel\r\n                }\r\n            })\r\n            if (deleteContact.status === 200) {\r\n                window.location = \"/\"\r\n            } else {\r\n                alert(\"DIDNT DELETE\")\r\n            }\r\n        } else {\r\n            console.log(\"DIDNT DELETE\")\r\n        }        \r\n    }\r\n    // set contact info for modals\r\n    const getContact = async () => {\r\n        let contactsArray = []\r\n        // if the selected grids are more than one must for loop the selected ids\r\n        if (selectionModel.length >= 2) {\r\n            try {\r\n                for (let i = 0 ; i < selectionModel.length; i++) {\r\n                    await axios({\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n                        },\r\n                        url: \"http://localhost:5000/api/private/get/multiplecontactsbyid\",\r\n                        data: {\r\n                            id: selectionModel[i]\r\n                        }\r\n                    }).then(data => {\r\n                        contactsArray.push(data.data)\r\n                        setContacts(contactsArray)\r\n                    })                   \r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n        // if only one select no need for for loop.\r\n        } else {\r\n            try {\r\n                await axios({\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n                    },\r\n                    url: \"http://localhost:5000/api/private/get/contactbyid\",\r\n                    data: {\r\n                        id: selectionModel\r\n                    }\r\n                }).then(data => {\r\n                    setContacts(data.data)\r\n                })\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n        }\r\n\r\n    }\r\n    // every time a new select occurs run the getContact function.\r\n    useEffect(()=> {\r\n        getContact()\r\n    },[selectionModel])\r\n\r\n    // Datagrid columns\r\n    const columns = [\r\n        {field: 'firstname', headerName: \"First Name\", width: 150, headerClassName: 'super-app-theme--header'},\r\n        {field: 'lastname', headerName: \"Last Name\", width: 150},\r\n        {field: 'company', headerName: \"Company\", width: 250},\r\n        {field: 'department', headerName: \"Department\", width: 250},\r\n        {field: 'jobtitle', headerName: \"Job Title\", width: 250},\r\n        {field: 'email', headerName: \"Email\", width: 250},\r\n        {field: 'phone', headerName: \"Phone\", width: 150},\r\n\r\n    ]\r\n    // update table data everytime user searches \r\n    useEffect(()=>{\r\n        setTableData(searchTerm)\r\n    }, [searchTerm])\r\n\r\n    return (\r\n        <Container>\r\n            {/* every new search term show contacts */}\r\n            {searchTerm ? \r\n            <div>\r\n                <div style={{display: \"flex\"}}>\r\n                    {/* Buttons to toggle from cards to data grid */}\r\n                    <ToggleButtonGroup orientation=\"horizontal\" value={view} exclusive onChange={handleViewChange}>\r\n                    <ToggleButton value=\"module\" aria-label=\"module\">\r\n                            <ViewModuleIcon />\r\n                        </ToggleButton>\r\n                        <ToggleButton value=\"list\" aria-label=\"list\">\r\n                            <ViewListIcon />\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n\r\n                        <ButtonGroup style={{marginLeft: \"89.8%\"}}>\r\n                        <IconButton aria-label=\"Add\" onClick={()=> {\r\n                            setViewAddModal(!viewAddModal)\r\n                        }}>\r\n                            <AddIcon />\r\n                        </IconButton>\r\n                        </ButtonGroup>\r\n                    {/* If one grid is selected render edit and delete button with correct functions (DATA GRID ONLY) */}\r\n                    {\r\n                        selectionModel.length === 1 && view === \"list\" ? \r\n                        <ButtonGroup style={{marginLeft: \"-17%\"}}>\r\n                            <AddFavorite currentContact={selectionModel} contacts={contact123}  />\r\n                            <IconButton aria-label=\"Edit\" onClick={()=>{\r\n                                     setEdit(!edit)\r\n                                     getContactInfo()\r\n                                    }}>\r\n                                <EditIcon />\r\n                            </IconButton>\r\n                            <IconButton aria-label=\"Delete\" onClick={()=>{\r\n                                deleteOneContact()\r\n                            }}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </ButtonGroup>   \r\n                       \r\n                        : <></>\r\n                    }\r\n                    {/* If more than one grid is selected render delete button with correct functions (DATA GRID ONLY) */}\r\n                    {\r\n                        selectionModel.length > 1 && view === \"list\" ? \r\n                        <ButtonGroup style={{marginLeft: \"-12.7%\"}}>\r\n                            <AddFavorite currentContact={selectionModel} contacts={contact123}  />\r\n                            <IconButton aria-label=\"Delete\" onClick={()=> {\r\n                                deleteManyContacts()\r\n                            }}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </ButtonGroup>                           \r\n                        : <></>\r\n                    }\r\n                    {/* Edit Modal */}\r\n                    {\r\n                        edit ? <EditModal view={edit} profile={editInfo} close={closeModalHandler} /> : <></>\r\n                    }\r\n                    {/* Add New Contact Modal */}\r\n                    {\r\n                        viewAddModal ? <AddContact open={viewAddModal} close={closeModalHandler} /> : <p></p>\r\n                    }\r\n                </div>\r\n                {/* If list button is clicked, render datagrid */}\r\n                {\r\n                    view === \"list\" ? \r\n                    <div style={{height: 650, width: '100%', marginTop: \"15px\"}} >\r\n                    <DataGrid\r\n                    style={{backgroundColor: \"white\"}}\r\n                    rows={tableData}\r\n                    columns={columns}\r\n                    pageSize={10}\r\n                    checkboxSelection\r\n                    // onRowClick={(e)=> console.log(e.row)}\r\n                    onSelectionModelChange={(newSelectionModel)=> {\r\n                        setSelectionModel(newSelectionModel)\r\n                    }}\r\n                    selectionModel={selectionModel}\r\n                    /> </div>\r\n                    : <p></p>\r\n                }\r\n                {/* If card button is clicked, render cards. */}\r\n                {\r\n                    view === \"module\" ? <SearchCards searchTerm={searchTerm} /> : <p></p>\r\n                }\r\n             </div> : <p></p>    \r\n            }\r\n\r\n        \r\n            </Container>\r\n    )\r\n}\r\n\r\nexport default ListSearches","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\History.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\ListLogs.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\EditModal.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\SearchCards.js",["186","187"],"import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\n// MATERIAL UI CORE\r\nimport { Paper, Avatar, Typography, ButtonGroup, IconButton } from '@material-ui/core'\r\n// MATERIAL UI ICONS\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\n// PAGE COMPONENTS\r\nimport CardModal from './CardModal';\r\nimport EditModal from './EditModal'\r\nimport AddFavorite from './AddFavorite'\r\nimport Pagination from '../page components/Pagination';\r\n\r\nfunction SearchCards({searchTerm}) {\r\n    // array of colors for avatar\r\n    const classes = [\"orange\", \"lightblue\", \"lightgray\", \"lightgreen\", \"lightred\"]\r\n\r\n    // Set Contact array for modals & functions\r\n    const [tableData, setTableData] = useState([])\r\n    const [modalInfo, setModalInfo] = useState([]);\r\n    const [selectModal, setselectModal] = useState([]);\r\n    const [contact123, setContacts] = useState([])\r\n    // Modals\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [edit, setEdit] = useState(false);\r\n    // Pagination\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage] = useState(6);\r\n\r\n    const closeModalHandler = () => {\r\n        setOpenModal(false)\r\n        setEdit(false)\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setTableData(searchTerm)\r\n    },[searchTerm])\r\n\r\n    // get current contact info of selected contact card\r\n    const getContactInfo = async () => {\r\n        let currentContact = await axios({\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n            },\r\n            url: \"http://localhost:5000/api/private/get/contact\",\r\n            data: {\r\n                id: modalInfo.id\r\n            }\r\n        })\r\n        // if ._id must be mongodb, else must be postgresql\r\n        if (currentContact.data._id) {\r\n            setselectModal(currentContact.data)\r\n        } else {\r\n            setselectModal(currentContact.data[0])\r\n        }\r\n\r\n    }\r\n    // delete contact\r\n    const deleteOneContact = async () => {\r\n        // confirm window\r\n        if (window.confirm(\"Are you sure you want to delete this contact?\")) {\r\n            let deleteContact = await axios({\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n                },\r\n                url: \"http://localhost:5000/api/private/delete/contact\",\r\n                data: {\r\n                    id: contact123.id\r\n                }\r\n            })\r\n            window.location=\"/\"\r\n        } else {\r\n            console.log(\"DIDNT DELETE\")\r\n        }\r\n    } \r\n\r\n    // Get current posts\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = tableData.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n    // Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    return (\r\n        <div>\r\n        <div style={{display: \"flex\", flexWrap: \"wrap\", alignItems: \"center\", gap: \"25px\", marginLeft: \"11%\"}}>\r\n            {/* Map through searched contacts */}\r\n        {\r\n            currentPosts.map(keyWord => \r\n                <div style={{height: \"320px\"}}>\r\n                <Paper style={{width: \"300px\", height: \"300px\", boxShadow: \"0px 1px 10px 1px rgba(0,0,0,0.41)\", borderRadius: \"15px\"}} key={keyWord.id} onClick={()=> setContacts(keyWord)}>\r\n                    <header style={{backgroundColor: \"#0d6efd\", height: \"45%\", borderRadius: \"15px\", boxShadow: \"0px 15px 22px 5px rgba(0,0,0,0.1)\"}}>\r\n                    <section style={{transform: \"scale(0.8)\", marginTop: \"2%\", marginLeft: \"-10%\"}}>\r\n                        {/* Edit and Delete Buttons */}\r\n                            <ButtonGroup>\r\n                                <IconButton aria-label=\"Edit\" onClick={()=> {\r\n                                        setModalInfo(keyWord)\r\n                                        setEdit(!edit)\r\n                                        getContactInfo()\r\n                                    }}  >\r\n                                    <EditIcon/>\r\n                                </IconButton>\r\n                                <IconButton aria-label=\"Delete\" onClick={async ()=> {\r\n                                        await getContactInfo()\r\n                                        deleteOneContact()\r\n                                    }} >\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                                <AddFavorite currentContact={contact123.id} contacts={contact123}/>\r\n                            </ButtonGroup> \r\n                        </section>\r\n                        <section style={{marginLeft: \"83%\", marginTop: \"-16%\"}}>\r\n                            {/* Expand info button */}\r\n                        <IconButton>\r\n                            <OpenInNewIcon onClick={()=> {\r\n                            setModalInfo(keyWord)\r\n                            setOpenModal(!openModal)\r\n                            }}  />\r\n                        </IconButton>\r\n                        </section>\r\n                    </header>\r\n                {/* Avatar */}\r\n                <Avatar variant=\"rounded\"\r\n                style={{marginLeft: \"44%\", \r\n                marginTop: \"-35px\", \r\n                color: \"black\",\r\n                transform: \"scale(2.0)\", \r\n                // search through and randomly pick color from array\r\n                backgroundColor: classes[Math.floor(Math.random() * 5)]}}>{keyWord.firstname[0]}</Avatar>\r\n                {/* Contact info */}\r\n                <section style={{paddingTop: \"25px\"}}>\r\n                <Typography align=\"left\" variant=\"h5\" style={{marginTop: \"10px\", textAlign: \"center\"}} >{keyWord.firstname + \" \" + keyWord.lastname}</Typography>\r\n                <Typography align=\"left\" variant=\"h6\" style={{textAlign: \"center\"}}>{keyWord.department}</Typography>\r\n                <Typography align=\"left\" variant=\"subtitle1\" style={{textAlign: \"center\"}}>{keyWord.company}</Typography>\r\n                <Typography align=\"left\" variant=\"subtitle2\" style={{textAlign: \"center\"}}>{keyWord.jobtitle}</Typography>\r\n                </section>\r\n\r\n            </Paper>\r\n            </div>\r\n                )\r\n        }\r\n        <div>\r\n\r\n      </div>\r\n        {/* Expand Info Modal */}\r\n      {\r\n          openModal ? <div > <CardModal view={openModal} info={modalInfo} close={closeModalHandler} /> </div> : <p></p>\r\n      }\r\n      {/* Edit Modal */}\r\n      {\r\n          edit ? <div ><EditModal view={edit} close={closeModalHandler} profile={modalInfo} /></div>  : <p></p>\r\n      }\r\n      </div>\r\n      {/* Pagination numbers at the bottom */}\r\n      <div style={{marginLeft: \"35%\"}}>\r\n      <Pagination \r\n        postsPerPage={postsPerPage}\r\n        totalPosts={tableData.length}\r\n        paginate={paginate}\r\n\r\n      />\r\n      </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchCards\r\n","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\Pagination.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\CardModal.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\AddContact.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\Settings.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\Bookmarks.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\AddFolder.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\Folder.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\pages\\inFolder.js",["188"],"import React, {useState, useEffect} from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\n// MATERIAL UI\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n// COMPONENTS\r\nimport NavBar from '../page components/NavBar';\r\nimport AddFolder from '../page components/AddFolder';\r\nimport Folder from '../page components/Folder';\r\nimport FavoriteCards from '../page components/FavoriteCards';\r\n\r\nfunction InFolder() {\r\n    // get folderid from url\r\n    let { folderid } = useParams();\r\n    // usehistory for redirect\r\n    let history = useHistory();\r\n    // useStates\r\n    const [user, setUser] = useState([])\r\n    const [currentFolder, setCurrentFolder] = useState([])\r\n    const [contents, setContents] = useState([])\r\n\r\n    // get current user data\r\n    const getCurrentUser = async () => {\r\n        let currentUser = await axios({\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n            },\r\n            url: \"http://localhost:5000/api/private/get/currentuser\",\r\n        })\r\n        setUser(currentUser.data)\r\n    }\r\n    // get current folder thats opened\r\n    const getCurrentFolder = async () => {\r\n        let getcurrentFolder = await axios({\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n            },\r\n            url: \"http://localhost:5000/api/private/get/currentfolder\",\r\n            data: {\r\n                id: folderid\r\n            }\r\n        })\r\n            setCurrentFolder(getcurrentFolder.data)\r\n        }\r\n\r\n    // get all the contacts related to opened folder \r\n    const getFolderContents = async () => {\r\n        let folderContents = await axios({\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n            },\r\n            url: \"http://localhost:5000/api/private/get/bookmarkcontent\",\r\n            data: {\r\n                folderID: folderid\r\n            }\r\n        })\r\n        console.log(folderContents.data)\r\n        setContents(folderContents.data)\r\n    }\r\n\r\n    // run functions on launch\r\n    useEffect(()=> {\r\n        getCurrentUser()\r\n        getCurrentFolder()\r\n        getFolderContents()\r\n    }, [])\r\n\r\n    // delete folder \r\n    const deleteFolder = async () => {\r\n        if (window.confirm(\"Are you sure you want to delete this contact?\")) {\r\n            await axios({\r\n                method:\"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n                },\r\n                url: \"http://localhost:5000/api/private/delete/folder\",\r\n                data: {\r\n                    id: folderid\r\n                }\r\n            })\r\n            alert(\"Successfully deleted\")\r\n            history.goBack()\r\n        } else {\r\n            console.log(\"didnt delete\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavBar />\r\n            {/* Delete Button */}\r\n            <section style={{marginLeft: \"86.9%\"}}>\r\n            <IconButton onClick={()=> deleteFolder()}>\r\n                <DeleteIcon />\r\n            </IconButton>\r\n            {/* Add folder button */}\r\n            <AddFolder currentUser={user} currentFolder={currentFolder} folderid={folderid} />\r\n            </section>\r\n            {/* Display folders inside folder */}\r\n            <section style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\", alignItems: \"center\", gap: \"10px\"}} >\r\n            {\r\n                currentFolder.map(keyWord=> <Folder key={keyWord.id || keyWord._id} currentFolder={keyWord} />)\r\n            }\r\n            </section>\r\n            {/* display contacts in folder */}\r\n            <section style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\", alignItems: \"center\", gap: \"10px\", marginLeft: \"30px\", marginTop: \"2%\"}} >\r\n                {\r\n                    contents.map(keyWord => <FavoriteCards key={keyWord.id || keyWord._id} searchTerm={keyWord} />)\r\n                }\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InFolder\r\n","C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\AddFavorite.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 3\\Sprints\\Sprint Three\\Project One\\contact-book\\client\\src\\components\\page components\\FavoriteCards.js",[],"C:\\Users\\Colby\\Documents\\TESTING\\MORE CLONING\\Java-Search-Engine\\client\\src\\index.js",[],"C:\\Users\\Colby\\Documents\\TESTING\\MORE CLONING\\Java-Search-Engine\\client\\src\\App.js",["189"],"import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\n//Routing\nimport PrivateRoute from './components/routing/PrivateRoute';\n\n//Pages\nimport SearchPage from './components/pages/SearchPage';\nimport LoginPage from './components/pages/LoginPage';\nimport RegisterPage from './components/pages/RegisterPage';\nimport History from './components/pages/History';\nimport Settings from './components/pages/Settings';\nimport Bookmarks from './components/pages/Bookmarks';\nimport InFolder from './components/pages/inFolder';\n\nconst App = () => {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Switch>\n        {/******************* PRIVATE ROUTES *******************/}\n        <Route exact path=\"/\" component={SearchPage} />\n        <Route exact path=\"/history\" component={History} />\n        <Route exact path=\"/settings\" component={Settings} />\n        <Route exact path=\"/bookmarks\" component={Bookmarks} />\n        <Route path=\"/bookmarks/:folderid\" component={InFolder} />\n        \n        {/******************* ROUTES *******************/}\n        <Route exact path=\"/login\" component={LoginPage} />\n        <Route exact path=\"/register\" component={RegisterPage} />\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\Colby\\Documents\\TESTING\\MORE CLONING\\Java-Search-Engine\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\index.js",[],["190","191"],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\App.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\pages\\SearchPage.js",["192","193"],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\routing\\PrivateRoute.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\pages\\RegisterPage.js",["194"],"import React,{useState, useEffect} from 'react'\r\nimport './css/main.css'\r\nimport axios from 'axios'\r\n// COMPONENTS\r\nimport logo from \"../img/logo.png\"\r\nimport { Link } from 'react-router-dom'\r\n// BOOTSTRAP\r\nimport { Form, Card, Alert } from \"react-bootstrap\"\r\n// MATERIAL UI\r\nimport { FormControl, Input, InputLabel, InputAdornment, Button as Button1 } from '@material-ui/core'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\n\r\nfunction RegisterPage({ history }) {\r\n    // Input setStates\r\n    const [username, setUsername] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    // Show user Error\r\n    const [error, setError] = useState(\"\")\r\n\r\n    // if user has Token push to Search Page\r\n    useEffect(()=> {\r\n        if(localStorage.getItem(\"authToken\")) {\r\n            history.push(\"/\")\r\n        }\r\n    }, [history])\r\n\r\n    // Register Function\r\n    const registerHandler = async (e) => {\r\n        e.preventDefault();\r\n\r\n        //Header for post request\r\n        const config = {\r\n            header: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }\r\n\r\n        // check password & confirm password \r\n        if(password !== confirmPassword){\r\n            setPassword(\"\");\r\n            setConfirmPassword(\"\");\r\n            setTimeout(()=> {\r\n                setError(\"\")\r\n            }, 5000)\r\n            return setError(\"Passwords do not match.\")\r\n        }\r\n        try {\r\n            // Post req. then set token and push user to search page\r\n            const { data } = await axios.post(\"/api/auth/signup\", {username, email, password})\r\n            localStorage.setItem(\"authToken\", data.accessToken)\r\n            history.push(\"/login\")\r\n        } catch (err) {\r\n            // show user error if fail req.\r\n            setError(error.response.data.error)\r\n            setTimeout(()=>{\r\n                setError(\"\")\r\n            }, 5000)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <unAuthNavbar />\r\n        <div className=\"w-100\" style={{ maxWidth: \"600px\", marginLeft: \"34.4%\", marginTop: \"10.3%\" }}>\r\n        <Card style={{height: \"534px\", boxShadow: \"0px 1px 100px 4px rgba(0,0,0,0.41)\", borderRadius: \"15px\"}}>\r\n        <Card.Body>\r\n          {/*************************** TITLE ***************************/}\r\n          <header style={{display: \"flex\", flexWrap: \"wrap\", alignItems: \"center\", gap: \"25px\", marginLeft: \"12%\"}}>\r\n          <h1 >The Important Book</h1> \r\n          <img src={logo} alt=\"\" width=\"50\" height=\"50\" />\r\n          </header>\r\n          <p style={{marginLeft: \"30%\"}}>Search for the right person.</p>\r\n          <h2 className=\"text-center mb-4\" style={{marginTop: \"5%\", marginLeft: \"-3%\", textDecoration: \"underline\"}}>Sign Up</h2>\r\n          {/*************************** IF ERROR ***************************/}\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n          {/*************************** FORM ***************************/}\r\n          <Form onSubmit={registerHandler}  style={{marginTop: \"7%\"}}>\r\n            <section style={{marginLeft: \"10%\"}}>\r\n              {/*************************** USERNAME INPUT ***************************/}\r\n            <FormControl style={{width: \"90%\"}}>\r\n              <InputLabel htmlFor=\"username\" >Username</InputLabel>\r\n              <Input id=\"username\" startAdornment={<InputAdornment position=\"start\"><AccountCircle /></InputAdornment>} required type=\"username\" onChange={(e)=> setUsername(e.target.value)}/>\r\n            </FormControl >\r\n            {/*************************** EMAIL INPUT ***************************/}\r\n            <FormControl style={{width: \"90%\"}}>\r\n              <InputLabel htmlFor=\"email\" >Email</InputLabel>\r\n              <Input id=\"email\" startAdornment={<InputAdornment position=\"start\"><EmailIcon /></InputAdornment>} required type=\"email\" onChange={(e)=> setEmail(e.target.value)}/>\r\n            </FormControl>\r\n            {/*************************** PASSWORD INPUT ***************************/}\r\n            <FormControl style={{width: \"90%\"}}>\r\n              <InputLabel htmlFor=\"password\" >Password</InputLabel>\r\n              <Input id=\"password\" startAdornment={<InputAdornment position=\"start\"><VpnKeyIcon /></InputAdornment>} type=\"password\" required onChange={(e)=> setPassword(e.target.value)}/>\r\n            </FormControl>\r\n            {/*************************** CONFIRM PASSWORD INPUT ***************************/}\r\n            <FormControl style={{width: \"90%\"}}>\r\n              <InputLabel htmlFor=\"password-confirm\" >Confirm Passoword</InputLabel>\r\n              <Input id=\"password-confirm\" startAdornment={<InputAdornment position=\"start\"><VpnKeyIcon /></InputAdornment>} type=\"password\" required onChange={(e)=> setConfirmPassword(e.target.value)}/>\r\n            </FormControl>\r\n            </section>\r\n            {/*************************** SIGNUP BUTTON ***************************/}\r\n            <section style={{marginTop: \"30px\"}}>\r\n              <Button1 disabled={loading} className=\"w-100\" type=\"submit\"variant=\"contained\" color=\"primary\">\r\n                Sign Up\r\n              </Button1>\r\n            </section>\r\n          </Form>\r\n        </Card.Body>\r\n        {/*************************** LOG IN LINK ***************************/}\r\n        <Card.Footer>\r\n        <footer className=\"w-100 text-center\">\r\n          Already have an account? <Link to=\"/login\">Log In</Link>\r\n        </footer>\r\n        </Card.Footer>\r\n      </Card>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default RegisterPage","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\pages\\LoginPage.js",["195"],"import React, {useState, useEffect} from 'react'\r\nimport './css/main.css'\r\nimport axios from 'axios'\r\n\r\n// COMPONENTS\r\nimport { Link } from 'react-router-dom'\r\nimport logo from \"../img/logo.png\"\r\n// BOOTSTRAP\r\nimport { Form, Card, Alert } from \"react-bootstrap\"\r\n// MATERIAL UI\r\nimport { FormControl, Input, InputLabel, Button as Button1 } from '@material-ui/core'\r\n\r\nfunction LoginPage({history}) {\r\n   // useStates for inputs\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    // useStates for functions\r\n    const [error, setError] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    // // On load if theres a authToken push to Search Page\r\n    // useEffect(()=> {\r\n    //     if(localStorage.getItem(\"authToken\")) {\r\n    //         history.push(\"/\")\r\n    //     }\r\n    // }, [history])\r\n\r\n    // log in function\r\n    const loginHandler = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            // post req, then set Token to LS and push user to Search Page\r\n            const { data } = await axios.post(\"/api/auth/signin\", {username, password})\r\n            console.log(\"username\" + username, \"password\" + password)\r\n            localStorage.setItem(\"authToken\", data.accessToken)\r\n            localStorage.setItem(\"username\", username)\r\n            history.push(\"/\")\r\n        } catch (err) {\r\n            // Show user Error for 5 seconds\r\n            setError(\"Incorrect password.\")\r\n            setTimeout(()=>{\r\n                setError(\"\")\r\n            }, 5000)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"w-100\" style={{ maxWidth: \"600px\", marginLeft: \"34.4%\", marginTop: \"10.3%\" }}>\r\n        <Card style={{height: \"534px\", borderRadius: \"15px\", boxShadow: \"0px 1px 100px 4px rgba(0,0,0,0.41)\"}}>\r\n        <Card.Body>\r\n          {/*************************** TITLE ***************************/}\r\n          <header style={{display: \"flex\", flexWrap: \"wrap\", alignItems: \"center\", gap: \"25px\", marginLeft: \"12%\"}}>\r\n          <h1>The Important Book</h1> \r\n          <img src={logo} alt=\"\" width=\"50\" height=\"50\" />\r\n          </header>\r\n          <p style={{marginLeft: \"30%\"}}>Search for the right person.</p>\r\n          <h2 className=\"text-center mt-5\" style={{marginLeft: \"-3%\", textDecoration: \"underline\"}}>Log In</h2>\r\n          {/*************************** IF ERROR  ***************************/}\r\n          {error && <Alert variant=\"danger\" style={{position: \"absolute\", marginLeft: \"33%\"}}>{error}</Alert>}\r\n          {/*************************** FORM ***************************/}\r\n            <Form style={{marginTop: \"10%\"}} onSubmit={loginHandler}>\r\n              {/*************************** INPUT ***************************/}\r\n            <section style={{marginLeft: \"10%\"}}>\r\n              {/*************************** USERNAME INPUT ***************************/}\r\n            <FormControl style={{width: \"90%\"}}>\r\n              <InputLabel htmlFor=\"username\" >Username</InputLabel>\r\n              <Input id=\"username\" required onChange={(e)=> setUsername(e.target.value)} />\r\n            </FormControl>\r\n            {/*************************** PASSWORD INPUT ***************************/}\r\n            <FormControl style={{width: \"90%\"}} >\r\n              <InputLabel htmlFor=\"password\" >Password</InputLabel>\r\n              <Input id=\"password\" type=\"password\" required  onChange={(e)=> setPassword(e.target.value)}/>\r\n            </FormControl>\r\n            </section>\r\n            {/*************************** LOG IN BUTTON ***************************/}\r\n            <section style={{marginTop: \"71px\"}}>\r\n              <Button1 disabled={loading} className=\"w-100\" type=\"submit\"variant=\"contained\" color=\"primary\">\r\n                Log In\r\n              </Button1>\r\n            </section>\r\n          </Form>\r\n        </Card.Body>\r\n        {/*************************** REGISTER LINK ***************************/}\r\n        <Card.Footer>\r\n        <footer className=\"w-100 text-center\" style={{color: \"black\"}}>\r\n        Need an account? <Link to=\"/register\">Register</Link>\r\n      </footer>\r\n        </Card.Footer>\r\n      </Card>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\pages\\History.js",["196"],"import MongoDBDataService from '../services/MongoDB';\r\n// PAGE FOR ALL SEARCH LOGS\r\nimport React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\nimport ListLogs from '../page components/ListLogs';\r\nimport NavBar from '../page components/NavBar';\r\n\r\nfunction History() {\r\n    const [Logs, setLogs] = useState()\r\n    const [user] = useState(localStorage.getItem(\"username\"))\r\n\r\n    // gets all logs and saves data on state\r\n    async function getAllLogs() {\r\n        await MongoDBDataService.searchLogsByUsername(user).then((res)=> setLogs(res.data))\r\n        // const config = {\r\n        //     headers: {\r\n        //         \"Content-Type\": \"application/json\",\r\n        //         Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n        //     }\r\n        // }\r\n        // await axios.get(\"http://localhost:8080/api/mongodb/logs\",{\r\n        //     user: user,\r\n        //     withCredentials: true,\r\n        // },config).then((res)=>{\r\n        //     setLogs(res.data)\r\n        //     })\r\n    }\r\n    // run function on launch\r\n    useEffect(()=> {\r\n        getAllLogs()\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <NavBar/>\r\n            {/* Datagrid for all logs */}\r\n            {\r\n                Logs ? <ListLogs Logs={Logs}/> : <h1>No Logs</h1>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default History\r\n","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\ListSearches.js",["197","198","199","200","201","202"],"import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\n// BOOTSTRAP \r\nimport {Container} from 'react-bootstrap';\r\n// MATERIAL UI CORE\r\nimport {IconButton} from '@material-ui/core';\r\nimport {DataGrid} from '@material-ui/data-grid';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n// MATERIAL UI ICONS\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\n// import EditIcon from '@material-ui/icons/Edit';\r\n// import DeleteIcon from '@material-ui/icons/Delete';\r\n// import AddIcon from '@material-ui/icons/Add';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\n// MATERIAL UI LAB\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n// COMPONENTS\r\n// import EditModal from './EditModal'\r\nimport SearchCards from './SearchCards';\r\n// import AddContact from './AddContact';\r\n\r\n\r\nfunction ListSearches({searchTerm}) {\r\n    // Modal Info\r\n    const [tableData, setTableData] = useState([])\r\n    const [selectionModel, setSelectionModel] = useState([])\r\n    const [editInfo, setEditInfo] = useState([])\r\n    const [contact123, setContacts] = useState([])\r\n    // View buttons to switch from cards to datagrid\r\n    const [view, setView] = useState('module');\r\n    // Modal States\r\n    // const [edit, setEdit] = useState(false);\r\n    // const [viewAddModal, setViewAddModal] = useState(false)\r\n\r\n    // get current contact info and save to state for edit modal\r\n    const getContactInfo = async () => {\r\n        let id = selectionModel[0]\r\n        let currentContact = await axios({\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n            },\r\n            url: \"http://localhost:5000/api/private/get/contact\",\r\n            data: {\r\n                id: id\r\n            }\r\n        })\r\n        if (currentContact.data._id) {\r\n            setEditInfo(currentContact.data)\r\n        } else {\r\n            setEditInfo(currentContact.data[0])\r\n        }\r\n\r\n    }\r\n    // change from cards to data grid\r\n    const handleViewChange = (event, nextView) => {\r\n        if(view === \"module\"){\r\n            setView(\"list\")\r\n        } else {\r\n            setView(\"module\")\r\n        }\r\n    };\r\n\r\n    // set contact info for modals\r\n    const getContact = async () => {\r\n        let contactsArray = []\r\n        // if the selected grids are more than one must for loop the selected ids\r\n        if (selectionModel.length >= 2) {\r\n            try {\r\n                for (let i = 0 ; i < selectionModel.length; i++) {\r\n                    await axios({\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n                        },\r\n                        url: \"http://localhost:5000/api/private/get/multiplecontactsbyid\",\r\n                        data: {\r\n                            id: selectionModel[i]\r\n                        }\r\n                    }).then(data => {\r\n                        contactsArray.push(data.data)\r\n                        setContacts(contactsArray)\r\n                    })                   \r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n        // if only one select no need for for loop.\r\n        } else {\r\n            try {\r\n                await axios({\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n                    },\r\n                    url: \"http://localhost:5000/api/private/get/contactbyid\",\r\n                    data: {\r\n                        id: selectionModel\r\n                    }\r\n                }).then(data => {\r\n                    setContacts(data.data)\r\n                })\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n        }\r\n\r\n    }\r\n    // every time a new select occurs run the getContact function.\r\n    useEffect(()=> {\r\n        getContact()\r\n    },[selectionModel])\r\n\r\n    // Datagrid columns\r\n    const columns = [\r\n        {field: 'firstName', headerName: \"First Name\", width: 150, headerClassName: 'super-app-theme--header'},\r\n        {field: 'lastName', headerName: \"Last Name\", width: 150},\r\n        {field: 'company', headerName: \"Company\", width: 250},\r\n        {field: 'department', headerName: \"Department\", width: 250},\r\n        {field: 'jobtTtle', headerName: \"Job Title\", width: 250},\r\n        {field: 'email', headerName: \"Email\", width: 250},\r\n        {field: 'phoneNumber', headerName: \"Phone\", width: 150},\r\n\r\n    ]\r\n    // update table data everytime user searches \r\n    useEffect(()=>{\r\n        setTableData(searchTerm)\r\n    }, [searchTerm])\r\n\r\n    return (\r\n        <Container>\r\n                <ToggleButtonGroup orientation=\"horizontal\" value={view} exclusive onChange={handleViewChange}>\r\n                    <ToggleButton value=\"module\" aria-label=\"module\">\r\n                            <ViewModuleIcon />\r\n                        </ToggleButton>\r\n                        <ToggleButton value=\"list\" aria-label=\"list\">\r\n                            <ViewListIcon />\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n\r\n            {/* every new search term show contacts */}\r\n            {searchTerm ? \r\n            <div>\r\n                {/* If list button is clicked, render datagrid */}\r\n                {\r\n                    view === \"list\" ? \r\n                    <div style={{height: 650, width: '100%', marginTop: \"15px\"}} >\r\n                    <DataGrid\r\n                    style={{backgroundColor: \"white\"}}\r\n                    rows={tableData}\r\n                    columns={columns}\r\n                    pageSize={10}\r\n                    checkboxSelection\r\n                    // onRowClick={(e)=> console.log(e.row)}\r\n                    onSelectionModelChange={(newSelectionModel)=> {\r\n                        setSelectionModel(newSelectionModel)\r\n                    }}\r\n                    selectionModel={selectionModel}\r\n                    /> </div>\r\n                    : <p></p>\r\n                }\r\n                {/* If card button is clicked, render cards. */}\r\n                {\r\n                    view === \"module\" ? <SearchCards searchTerm={searchTerm} /> : <p></p>\r\n                }\r\n             </div> : <p></p>    \r\n            }\r\n\r\n        \r\n            </Container>\r\n    )\r\n}\r\n\r\nexport default ListSearches","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\NavBar.js",["203"],"import React, {useState} from 'react'\r\nimport { Navbar, Container, NavDropdown, Nav } from 'react-bootstrap'\r\n\r\nimport logo from \"../img/logo2.png\"\r\n\r\nfunction NavBar() {\r\n    // username use state\r\n    const [username, setUsername] = useState(localStorage.getItem(\"username\"))\r\n    // logout function remove the token and redirect to login page\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem(\"authToken\")\r\n        window.location = \"/login\"\r\n    }\r\n\r\n\r\n    return (\r\n        <Navbar variant=\"dark\" bg=\"primary\">\r\n            <Container>\r\n                {/* Contact Book text at top */}\r\n                <Navbar.Brand href=\"/\">\r\n                <img\r\n                    alt=\"\"\r\n                    src={logo}\r\n                    width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                    style={{marginRight: \"7px\"}}\r\n                    />{' '}\r\n                    The Important Book\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle />\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    {/* Text before username dropdown */}\r\n                <Navbar.Text>\r\n                    Signed in as:\r\n                </Navbar.Text>\r\n                <Nav>\r\n                    {/* Dropdown menu for settings, bookmarks, history and logout */}\r\n                    <NavDropdown\r\n                    id=\"nav-dropdown\"\r\n                    title={username}\r\n                    menuVariant=\"light\"\r\n                    >\r\n                    <NavDropdown.Item href=\"/history\">History</NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavBar","C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\ListLogs.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\SearchCards.js",["204","205","206","207","208","209","210","211"],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\page components\\Pagination.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\services\\MongoDB.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\services\\SQL.js",[],"C:\\Users\\Colby\\Documents\\school\\Semester 4\\Sprint 2\\searchengine\\client\\src\\components\\services\\http-commons.js",[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":168,"column":7,"nodeType":"218","endLine":168,"endColumn":23,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":22,"column":12,"nodeType":"222","messageId":"223","endLine":22,"endColumn":23},{"ruleId":"220","severity":1,"message":"224","line":65,"column":17,"nodeType":"222","messageId":"223","endLine":65,"endColumn":30},{"ruleId":"216","severity":1,"message":"225","line":73,"column":8,"nodeType":"218","endLine":73,"endColumn":10,"suggestions":"226"},{"ruleId":"220","severity":1,"message":"227","line":4,"column":8,"nodeType":"222","messageId":"223","endLine":4,"endColumn":20},{"ruleId":"212","replacedBy":"228"},{"ruleId":"214","replacedBy":"229"},{"ruleId":"220","severity":1,"message":"230","line":1,"column":27,"nodeType":"222","messageId":"223","endLine":1,"endColumn":36},{"ruleId":"220","severity":1,"message":"231","line":17,"column":22,"nodeType":"222","messageId":"223","endLine":17,"endColumn":33},{"ruleId":"220","severity":1,"message":"232","line":37,"column":15,"nodeType":"222","messageId":"223","endLine":37,"endColumn":21},{"ruleId":"220","severity":1,"message":"230","line":1,"column":26,"nodeType":"222","messageId":"223","endLine":1,"endColumn":35},{"ruleId":"220","severity":1,"message":"233","line":4,"column":8,"nodeType":"222","messageId":"223","endLine":4,"endColumn":13},{"ruleId":"220","severity":1,"message":"234","line":6,"column":9,"nodeType":"222","messageId":"223","endLine":6,"endColumn":19},{"ruleId":"220","severity":1,"message":"235","line":8,"column":8,"nodeType":"222","messageId":"223","endLine":8,"endColumn":19},{"ruleId":"220","severity":1,"message":"236","line":28,"column":12,"nodeType":"222","messageId":"223","endLine":28,"endColumn":20},{"ruleId":"220","severity":1,"message":"237","line":29,"column":12,"nodeType":"222","messageId":"223","endLine":29,"endColumn":22},{"ruleId":"220","severity":1,"message":"238","line":37,"column":11,"nodeType":"222","messageId":"223","endLine":37,"endColumn":25},{"ruleId":"216","severity":1,"message":"217","line":117,"column":7,"nodeType":"218","endLine":117,"endColumn":23,"suggestions":"239"},{"ruleId":"220","severity":1,"message":"231","line":8,"column":22,"nodeType":"222","messageId":"223","endLine":8,"endColumn":33},{"ruleId":"220","severity":1,"message":"240","line":20,"column":23,"nodeType":"222","messageId":"223","endLine":20,"endColumn":35},{"ruleId":"220","severity":1,"message":"221","line":21,"column":12,"nodeType":"222","messageId":"223","endLine":21,"endColumn":23},{"ruleId":"220","severity":1,"message":"241","line":24,"column":12,"nodeType":"222","messageId":"223","endLine":24,"endColumn":21},{"ruleId":"220","severity":1,"message":"242","line":25,"column":12,"nodeType":"222","messageId":"223","endLine":25,"endColumn":16},{"ruleId":"220","severity":1,"message":"243","line":30,"column":11,"nodeType":"222","messageId":"223","endLine":30,"endColumn":28},{"ruleId":"220","severity":1,"message":"238","line":40,"column":11,"nodeType":"222","messageId":"223","endLine":40,"endColumn":25},{"ruleId":"220","severity":1,"message":"244","line":61,"column":11,"nodeType":"222","messageId":"223","endLine":61,"endColumn":27},{"ruleId":"220","severity":1,"message":"224","line":64,"column":17,"nodeType":"222","messageId":"223","endLine":64,"endColumn":30},"no-native-reassign",["245"],"no-negated-in-lhs",["246"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContact'. Either include it or remove the dependency array.","ArrayExpression",["247"],"no-unused-vars","'selectModal' is assigned a value but never used.","Identifier","unusedVar","'deleteContact' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCurrentFolder' and 'getFolderContents'. Either include them or remove the dependency array.",["248"],"'PrivateRoute' is defined but never used.",["245"],["246"],"'useEffect' is defined but never used.","'setUsername' is assigned a value but never used.","'config' is assigned a value but never used.","'axios' is defined but never used.","'IconButton' is defined but never used.","'ButtonGroup' is defined but never used.","'editInfo' is assigned a value but never used.","'contact123' is assigned a value but never used.","'getContactInfo' is assigned a value but never used.",["249"],"'setModalInfo' is assigned a value but never used.","'openModal' is assigned a value but never used.","'edit' is assigned a value but never used.","'closeModalHandler' is assigned a value but never used.","'deleteOneContact' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"250","fix":"254"},"Update the dependencies array to be: [getContact, selectionModel]",{"range":"255","text":"256"},"Update the dependencies array to be: [getCurrentFolder, getFolderContents]",{"range":"257","text":"258"},{"range":"259","text":"256"},[6195,6211],"[getContact, selectionModel]",[2546,2548],"[getCurrentFolder, getFolderContents]",[4299,4315]]